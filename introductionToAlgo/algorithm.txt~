randomSearch(A, a)
	n = A.length
	b = allocate an boolean array of length n
	for i = 1 to n
		b[i] = false
	count = 0
	while count < n
		index = a random integer between 1 and n
		if not b[index]
			if b[index] equals a 
				return index
			b[index] = true
			count = count + 1
	return -1

minHeapify(A,i)
	l = left(i)
	r = right(i)
	smallest = i
	if l < A.heapSize and A[l] < A[smallest]
		smallest = l
	if r < A.heapSize and A[r] < A[smallest]
		smallest = r
	if smallest not equal i
		swap A[i] and A[smallest]
		minHeapify(A, smallest)

iterativeMaxHeapify(A, i)
	largest = i
	while true
		l = left(i)
		r = right(i)
		i = largest
		if l < A.heapSize and A[l] < A[largest]
			largest = l
		if r < A.heapSize and A[r] < A[largest]
			largest = r
		if largest not equal i
			swap A[i] and A[largest]
		else
			break

minHeapMinimun(A)
	return A[1]

minHeapExtractMin(A)
	minVal = A[1]
	A[1] = A[A.heapSize]
	A.heapSize = A.heapSize - 1
	minHeapify(A, 1)
	return minVal

minHeapDecreaseKey(A, i, key)
	if key > A[i]
		error "new key is larger than current key"
	A[i] = key
	p = parent(i)
	while A[p] > A[i]
		swap A[p] and A[i]
		i = p
		parent(i)

minHeapInsertKey(A, key)
	i = A.heapSize
	A.heapSize = A.heapSize + 1
	A[i] = positive infinity
	minHeapDecreaseKey(A, i, key)

minHeapDelete(A, i)
	if i equals A.heapSize
		A.heapSize = A.heapSize - 1
		return
	A.heapSize = A.heapSize - 1
	if A[A.heapSize + 1] > A[i]
		A[i] = A[A.heapSize]
		minHeapify(A, i)
	else if A[A.heapSize + 1] < A[i]
		minHeapDecreaseKey(A, i, A[A.heapSize + 1])

queueRemove(Q, key)
	remove the item has the "key" as its key and return the data.

queueAdd(Q, data, key)
	add the item with data is "data" and "key" as its key

queuePush(Q, data)
	queueAdd(Q, data, Q.minKey)
	maxHeapInsertKey(Q.heap, Q.minKey)
	Q.minKey = Q.minKey - 1

queuePop(Q)
	return queueRemove(Q, maxHeapExtractMax(Q.heap))

stackRemove(S, key)
	remove the item has the "key" as its key and return the data.

stackAdd(S, data, key)
	add the item with data is "data" and "key" as its key

stackPush(S, data)
	stackAdd(S, data, S.maxKey)
	maxHeapInsertKey(S.heap, S.maxKey)
	S.maxKey = S.maxKey + 1

stackPop(S)
	return stackRemove(S, maxHeapExtractMax(S.heap))
	
maxHeapify(A,i)
	largest = i
	end = min(A.d*p+1, A.heapSize)
	for i = A.d*(p-1)+2 to end
		if A[i] > A[largest]
			largest = i

	if smallest not equal i
		swap A[i] and A[largest]
		maxHeapify(A, largest)

maxHeapExtractMax(A)
	maxVal = A[1]
	A[1] = A[A.heapSize]
	A.heapSize = A.heapSize - 1
	maxHeapify(A, 1)
	return maxVal

maxHeapIncreaseKey(A, i, key)
	if key > A[i]
		error "new key is larger than current key"
	A[i] = key
	p = parent(i)
	while A[p] > A[i]
		swap A[p] and A[i]
		i = p
		parent(i)

maxHeapInsertKey(A, key)
	i = A.heapSize
	A.heapSize = A.heapSize + 1
	A[i] = negative infinity
	maxHeapIncreaseKey(A, i, key)

maxHeapDelete(A, i)
	if i equals A.heapSize
		A.heapSize = A.heapSize - 1
		return
	A.heapSize = A.heapSize - 1
	if A[A.heapSize + 1] < A[i]
		A[i] = A[A.heapSize]
		maxHeapify(A, i)
	else if A[A.heapSize + 1] > A[i]
		maxHeapIncreaseKey(A, i, A[A.heapSize + 1])

endPos(T)
	ePos.row = ceil(T.tabSize / T.col)
	ePos.col = T.tabSize mod T.col
	if ePos.col equals 0
		ePos.col = T.col

minTableaufy(T, pos)
	minPos = pos
	rPos = pos
	dPos = pos
	ePos = endPos(T)
	rPos.col = pos.col + 1
	dPos.row = pos.row + 1
	if dPos < ePos and T[dPos.row][dPos.col] < T[minPos.row][minPos.col]
		minPos = dPos
	if rPos < ePos and T[rPos.row][rPos.col] < T[minPos.row][minPos.col]
		minPos = rPos
	if minPos not equals pos
		swap T[minPos.row][minPos.col] and T[pos.row][pos.col]
		minTableaufy(T, minPos)

minTableauExtractMin(T)
	minVal = T[1][1]
	ePos = endPos(T)
	T[1][1] = T[ePos.row][ePos.col]
	T.tabSize = T.tabSize - 1
	pos.row = pos.col = 1
	minTableaufy(T, pos)

minTableauDecreaseKey(T, pos, key)
	if key > T[pos.row][pos.col]
		error "new key is larger than current key"
	if pos.row equals 1 and pos.col equals 1
		T[pos.row][pos.col] = key
		return
	if pos.col > 1 and T[pos.row][pos.col - 1] > key
		pos.col = pos.col - 1
		minTableauDecreaseKey(T, pos, key)
		return
	if pos.row > 1 and T[pos.row - 1][pos.col] > key
		pos.row = pos.row - 1
		minTableauDecreaseKey(T, pos, key)
		return
	
minTableauInsertKey(T, key)
	T.tabSize = T.tabSize + 1
	ePos = endPos(T)
	A[ePos.row][ePos.col] = positive infinity
	minTableauDecreaseKey(A, ePos, key)

minTableauDelete(T, pos)
	ePos = endPos(T)
	T.tabSize = T.tabSize - 1
	if T[ePos.row][ePos.col] > T[pos.row][pos.col]
		T[pos.row][pos.col] = T[ePos.row][ePos.col]
		minTableaufy(T, pos)
	else if T[ePos.row][ePos.col] < T[pos.row][pos.col]
		minTableauDecreaseKey(T, pos, T[ePos.row][ePos.col])

buildMinTableau(T)
	if T.row < 1 or T.col < 1
		return
	T.tabSize = 1
	for i = 2 to T.col
		minTableauInsertKey(T, T[1][i])
	for i = 2 to T.row
		for j = 1 to T.col
			minTableauInsertKey(T, T[i][j])
		
	
minTableauSort(T)
	buildMinTableau(T)
	minPos.row = 1
	minPos.col = 1
	while T.tabSize > 0
		ePos = endPos(T)
		swap T[ePos.row][ePos.col] and T[1][1]
		T.tabSize = T.tabSize - 1
		minTableaufy(T, minPos)

findTableauKey(T, key)
	ePos = endPos(T)
	i = 1
	j = T.col
	while i < ePos.row and j > 0
		if key equals T[i][j]
			pos.row = i
			pos.col = j
			return true
		if key > T[i][j]
			i = i + 1
		else
			j = j - 1
	j = binSearch(T[ePos.row], ePos.col)
	return j not equals -1

quickSort(A, p, r)
	if p less than or equal to r
		return
	j = hoarePartition(A, p, r)
	quickSort(A, p, j - 1)
	quickSort(A, j + 1, r)
